-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Persons
-- Item: spCreatePerson
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Person
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spCreatePerson]
GO

CREATE PROCEDURE [abstracts].[spCreatePerson]
    @FirstName nvarchar(100),
    @LastName nvarchar(100),
    @Email nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO
    [abstracts].[Person]
        (
            [FirstName],
            [LastName],
            [Email]
        )
    VALUES
        (
            @FirstName,
            @LastName,
            @Email
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [abstracts].[vwPersons] WHERE [ID] = SCOPE_IDENTITY()
END
GO
GRANT EXECUTE ON [abstracts].[spCreatePerson] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviews
-- Item: spCreateReview
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Review
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spCreateReview]
GO

CREATE PROCEDURE [abstracts].[spCreateReview]
    @AssignedAt datetime,
    @SubmissionID int,
    @ReviewerID int,
    @RoleID uniqueidentifier,
    @Score int,
    @Status nvarchar(50),
    @ReviewedAt datetime,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO
    [abstracts].[Review]
        (
            [AssignedAt],
            [SubmissionID],
            [ReviewerID],
            [RoleID],
            [Score],
            [Status],
            [ReviewedAt],
            [Comments]
        )
    VALUES
        (
            @AssignedAt,
            @SubmissionID,
            @ReviewerID,
            @RoleID,
            @Score,
            @Status,
            @ReviewedAt,
            @Comments
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [abstracts].[vwReviews] WHERE [ID] = SCOPE_IDENTITY()
END
GO
GRANT EXECUTE ON [abstracts].[spCreateReview] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviewer Roles
-- Item: spCreateReviewerRole
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ReviewerRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spCreateReviewerRole]
GO

CREATE PROCEDURE [abstracts].[spCreateReviewerRole]
    @Name nvarchar(100),
    @SubmissionTypeID uniqueidentifier,
    @Description nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [abstracts].[ReviewerRole]
        (
            [Name],
            [SubmissionTypeID],
            [Description]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @SubmissionTypeID,
            @Description
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [abstracts].[vwReviewerRoles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [abstracts].[spCreateReviewerRole] TO [cdp_Integration], [cdp_Developer]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submissions
-- Item: spCreateSubmission
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Submission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spCreateSubmission]
GO

CREATE PROCEDURE [abstracts].[spCreateSubmission]
    @SubmittedAt datetime,
    @Title nvarchar(200),
    @Description nvarchar(MAX),
    @Contents nvarchar(MAX),
    @SubmissionTypeID uniqueidentifier,
    @Status nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO
    [abstracts].[Submission]
        (
            [SubmittedAt],
            [Title],
            [Description],
            [Contents],
            [SubmissionTypeID],
            [Status]
        )
    VALUES
        (
            @SubmittedAt,
            @Title,
            @Description,
            @Contents,
            @SubmissionTypeID,
            @Status
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [abstracts].[vwSubmissions] WHERE [ID] = SCOPE_IDENTITY()
END
GO
GRANT EXECUTE ON [abstracts].[spCreateSubmission] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Persons
-- Item: spCreateSubmissionPerson
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR SubmissionPerson
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spCreateSubmissionPerson]
GO

CREATE PROCEDURE [abstracts].[spCreateSubmissionPerson]
    @SubmissionID int,
    @PersonID int,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO
    [abstracts].[SubmissionPerson]
        (
            [SubmissionID],
            [PersonID],
            [RoleID]
        )
    VALUES
        (
            @SubmissionID,
            @PersonID,
            @RoleID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [abstracts].[vwSubmissionPersons] WHERE [ID] = SCOPE_IDENTITY()
END
GO
GRANT EXECUTE ON [abstracts].[spCreateSubmissionPerson] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Roles
-- Item: spCreateSubmissionRole
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR SubmissionRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spCreateSubmissionRole]
GO

CREATE PROCEDURE [abstracts].[spCreateSubmissionRole]
    @Name nvarchar(100),
    @SubmissionTypeID uniqueidentifier,
    @Description nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [abstracts].[SubmissionRole]
        (
            [Name],
            [SubmissionTypeID],
            [Description]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @SubmissionTypeID,
            @Description
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [abstracts].[vwSubmissionRoles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [abstracts].[spCreateSubmissionRole] TO [cdp_Integration], [cdp_Developer]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Types
-- Item: spCreateSubmissionType
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR SubmissionType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spCreateSubmissionType]
GO

CREATE PROCEDURE [abstracts].[spCreateSubmissionType]
    @Name nvarchar(100),
    @ParentID uniqueidentifier,
    @Type nvarchar(20),
    @SubmissionDeadline datetime,
    @Description nvarchar(MAX),
    @EvaluationCriteria nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [abstracts].[SubmissionType]
        (
            [Name],
            [ParentID],
            [Type],
            [SubmissionDeadline],
            [Description],
            [EvaluationCriteria]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @ParentID,
            @Type,
            @SubmissionDeadline,
            @Description,
            @EvaluationCriteria
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [abstracts].[vwSubmissionTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [abstracts].[spCreateSubmissionType] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Persons
-- Item: spDeletePerson
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Person
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spDeletePerson]
GO

CREATE PROCEDURE [abstracts].[spDeletePerson]
    @ID int
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [abstracts].[Person]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [abstracts].[spDeletePerson] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviews
-- Item: spDeleteReview
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Review
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spDeleteReview]
GO

CREATE PROCEDURE [abstracts].[spDeleteReview]
    @ID int
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [abstracts].[Review]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [abstracts].[spDeleteReview] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviewer Roles
-- Item: spDeleteReviewerRole
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ReviewerRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spDeleteReviewerRole]
GO

CREATE PROCEDURE [abstracts].[spDeleteReviewerRole]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [abstracts].[ReviewerRole]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [abstracts].[spDeleteReviewerRole] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submissions
-- Item: spDeleteSubmission
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Submission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spDeleteSubmission]
GO

CREATE PROCEDURE [abstracts].[spDeleteSubmission]
    @ID int
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [abstracts].[Submission]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [abstracts].[spDeleteSubmission] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Persons
-- Item: spDeleteSubmissionPerson
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR SubmissionPerson
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spDeleteSubmissionPerson]
GO

CREATE PROCEDURE [abstracts].[spDeleteSubmissionPerson]
    @ID int
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [abstracts].[SubmissionPerson]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [abstracts].[spDeleteSubmissionPerson] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Roles
-- Item: spDeleteSubmissionRole
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR SubmissionRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spDeleteSubmissionRole]
GO

CREATE PROCEDURE [abstracts].[spDeleteSubmissionRole]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [abstracts].[SubmissionRole]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [abstracts].[spDeleteSubmissionRole] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Types
-- Item: spDeleteSubmissionType
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR SubmissionType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spDeleteSubmissionType]
GO

CREATE PROCEDURE [abstracts].[spDeleteSubmissionType]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [abstracts].[SubmissionType]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [abstracts].[spDeleteSubmissionType] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Persons
-- Item: spUpdatePerson
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Person
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spUpdatePerson]
GO

CREATE PROCEDURE [abstracts].[spUpdatePerson]
    @ID int,
    @FirstName nvarchar(100),
    @LastName nvarchar(100),
    @Email nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[Person]
    SET
        [FirstName] = @FirstName,
        [LastName] = @LastName,
        [Email] = @Email
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [abstracts].[vwPersons]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [abstracts].[spUpdatePerson] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Person table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [abstracts].trgUpdatePerson
GO
CREATE TRIGGER [abstracts].trgUpdatePerson
ON [abstracts].[Person]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[Person]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [abstracts].[Person] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviews
-- Item: spUpdateReview
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Review
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spUpdateReview]
GO

CREATE PROCEDURE [abstracts].[spUpdateReview]
    @ID int,
    @AssignedAt datetime,
    @SubmissionID int,
    @ReviewerID int,
    @RoleID uniqueidentifier,
    @Score int,
    @Status nvarchar(50),
    @ReviewedAt datetime,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[Review]
    SET
        [AssignedAt] = @AssignedAt,
        [SubmissionID] = @SubmissionID,
        [ReviewerID] = @ReviewerID,
        [RoleID] = @RoleID,
        [Score] = @Score,
        [Status] = @Status,
        [ReviewedAt] = @ReviewedAt,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [abstracts].[vwReviews]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [abstracts].[spUpdateReview] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Review table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [abstracts].trgUpdateReview
GO
CREATE TRIGGER [abstracts].trgUpdateReview
ON [abstracts].[Review]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[Review]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [abstracts].[Review] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviewer Roles
-- Item: spUpdateReviewerRole
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ReviewerRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spUpdateReviewerRole]
GO

CREATE PROCEDURE [abstracts].[spUpdateReviewerRole]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @SubmissionTypeID uniqueidentifier,
    @Description nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[ReviewerRole]
    SET
        [Name] = @Name,
        [SubmissionTypeID] = @SubmissionTypeID,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [abstracts].[vwReviewerRoles]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [abstracts].[spUpdateReviewerRole] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the ReviewerRole table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [abstracts].trgUpdateReviewerRole
GO
CREATE TRIGGER [abstracts].trgUpdateReviewerRole
ON [abstracts].[ReviewerRole]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[ReviewerRole]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [abstracts].[ReviewerRole] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submissions
-- Item: spUpdateSubmission
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Submission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spUpdateSubmission]
GO

CREATE PROCEDURE [abstracts].[spUpdateSubmission]
    @ID int,
    @SubmittedAt datetime,
    @Title nvarchar(200),
    @Description nvarchar(MAX),
    @Contents nvarchar(MAX),
    @SubmissionTypeID uniqueidentifier,
    @Status nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[Submission]
    SET
        [SubmittedAt] = @SubmittedAt,
        [Title] = @Title,
        [Description] = @Description,
        [Contents] = @Contents,
        [SubmissionTypeID] = @SubmissionTypeID,
        [Status] = @Status
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [abstracts].[vwSubmissions]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [abstracts].[spUpdateSubmission] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Submission table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [abstracts].trgUpdateSubmission
GO
CREATE TRIGGER [abstracts].trgUpdateSubmission
ON [abstracts].[Submission]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[Submission]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [abstracts].[Submission] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Persons
-- Item: spUpdateSubmissionPerson
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR SubmissionPerson
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spUpdateSubmissionPerson]
GO

CREATE PROCEDURE [abstracts].[spUpdateSubmissionPerson]
    @ID int,
    @SubmissionID int,
    @PersonID int,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[SubmissionPerson]
    SET
        [SubmissionID] = @SubmissionID,
        [PersonID] = @PersonID,
        [RoleID] = @RoleID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [abstracts].[vwSubmissionPersons]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [abstracts].[spUpdateSubmissionPerson] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the SubmissionPerson table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [abstracts].trgUpdateSubmissionPerson
GO
CREATE TRIGGER [abstracts].trgUpdateSubmissionPerson
ON [abstracts].[SubmissionPerson]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[SubmissionPerson]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [abstracts].[SubmissionPerson] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Roles
-- Item: spUpdateSubmissionRole
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR SubmissionRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spUpdateSubmissionRole]
GO

CREATE PROCEDURE [abstracts].[spUpdateSubmissionRole]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @SubmissionTypeID uniqueidentifier,
    @Description nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[SubmissionRole]
    SET
        [Name] = @Name,
        [SubmissionTypeID] = @SubmissionTypeID,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [abstracts].[vwSubmissionRoles]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [abstracts].[spUpdateSubmissionRole] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the SubmissionRole table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [abstracts].trgUpdateSubmissionRole
GO
CREATE TRIGGER [abstracts].trgUpdateSubmissionRole
ON [abstracts].[SubmissionRole]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[SubmissionRole]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [abstracts].[SubmissionRole] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Types
-- Item: spUpdateSubmissionType
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR SubmissionType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [abstracts].[spUpdateSubmissionType]
GO

CREATE PROCEDURE [abstracts].[spUpdateSubmissionType]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @ParentID uniqueidentifier,
    @Type nvarchar(20),
    @SubmissionDeadline datetime,
    @Description nvarchar(MAX),
    @EvaluationCriteria nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[SubmissionType]
    SET
        [Name] = @Name,
        [ParentID] = @ParentID,
        [Type] = @Type,
        [SubmissionDeadline] = @SubmissionDeadline,
        [Description] = @Description,
        [EvaluationCriteria] = @EvaluationCriteria
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [abstracts].[vwSubmissionTypes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [abstracts].[spUpdateSubmissionType] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the SubmissionType table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [abstracts].trgUpdateSubmissionType
GO
CREATE TRIGGER [abstracts].trgUpdateSubmissionType
ON [abstracts].[SubmissionType]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [abstracts].[SubmissionType]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [abstracts].[SubmissionType] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Persons
-- Item: vwPersons
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Persons
-----               SCHEMA:      abstracts
-----               BASE TABLE:  Person
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [abstracts].[vwPersons]
GO

CREATE VIEW [abstracts].[vwPersons]
AS
SELECT
    p.*
FROM
    [abstracts].[Person] AS p
GO
GRANT SELECT ON [abstracts].[vwPersons] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviewer Roles
-- Item: vwReviewerRoles
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Reviewer Roles
-----               SCHEMA:      abstracts
-----               BASE TABLE:  ReviewerRole
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [abstracts].[vwReviewerRoles]
GO

CREATE VIEW [abstracts].[vwReviewerRoles]
AS
SELECT
    r.*,
    SubmissionType_SubmissionTypeID.[Name] AS [SubmissionType]
FROM
    [abstracts].[ReviewerRole] AS r
LEFT OUTER JOIN
    [abstracts].[SubmissionType] AS SubmissionType_SubmissionTypeID
  ON
    [r].[SubmissionTypeID] = SubmissionType_SubmissionTypeID.[ID]
GO
GRANT SELECT ON [abstracts].[vwReviewerRoles] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviews
-- Item: vwReviews
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Reviews
-----               SCHEMA:      abstracts
-----               BASE TABLE:  Review
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [abstracts].[vwReviews]
GO

CREATE VIEW [abstracts].[vwReviews]
AS
SELECT
    r.*,
    ReviewerRole_RoleID.[Name] AS [Role]
FROM
    [abstracts].[Review] AS r
INNER JOIN
    [abstracts].[ReviewerRole] AS ReviewerRole_RoleID
  ON
    [r].[RoleID] = ReviewerRole_RoleID.[ID]
GO
GRANT SELECT ON [abstracts].[vwReviews] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Persons
-- Item: vwSubmissionPersons
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Submission Persons
-----               SCHEMA:      abstracts
-----               BASE TABLE:  SubmissionPerson
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [abstracts].[vwSubmissionPersons]
GO

CREATE VIEW [abstracts].[vwSubmissionPersons]
AS
SELECT
    s.*,
    SubmissionRole_RoleID.[Name] AS [Role]
FROM
    [abstracts].[SubmissionPerson] AS s
INNER JOIN
    [abstracts].[SubmissionRole] AS SubmissionRole_RoleID
  ON
    [s].[RoleID] = SubmissionRole_RoleID.[ID]
GO
GRANT SELECT ON [abstracts].[vwSubmissionPersons] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Roles
-- Item: vwSubmissionRoles
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Submission Roles
-----               SCHEMA:      abstracts
-----               BASE TABLE:  SubmissionRole
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [abstracts].[vwSubmissionRoles]
GO

CREATE VIEW [abstracts].[vwSubmissionRoles]
AS
SELECT
    s.*,
    SubmissionType_SubmissionTypeID.[Name] AS [SubmissionType]
FROM
    [abstracts].[SubmissionRole] AS s
LEFT OUTER JOIN
    [abstracts].[SubmissionType] AS SubmissionType_SubmissionTypeID
  ON
    [s].[SubmissionTypeID] = SubmissionType_SubmissionTypeID.[ID]
GO
GRANT SELECT ON [abstracts].[vwSubmissionRoles] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submissions
-- Item: vwSubmissions
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Submissions
-----               SCHEMA:      abstracts
-----               BASE TABLE:  Submission
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [abstracts].[vwSubmissions]
GO

CREATE VIEW [abstracts].[vwSubmissions]
AS
SELECT
    s.*,
    SubmissionType_SubmissionTypeID.[Name] AS [SubmissionType]
FROM
    [abstracts].[Submission] AS s
INNER JOIN
    [abstracts].[SubmissionType] AS SubmissionType_SubmissionTypeID
  ON
    [s].[SubmissionTypeID] = SubmissionType_SubmissionTypeID.[ID]
GO
GRANT SELECT ON [abstracts].[vwSubmissions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Types
-- Item: vwSubmissionTypes
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Submission Types
-----               SCHEMA:      abstracts
-----               BASE TABLE:  SubmissionType
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [abstracts].[vwSubmissionTypes]
GO

CREATE VIEW [abstracts].[vwSubmissionTypes]
AS
SELECT
    s.*,
    SubmissionType_ParentID.[Name] AS [Parent]
FROM
    [abstracts].[SubmissionType] AS s
LEFT OUTER JOIN
    [abstracts].[SubmissionType] AS SubmissionType_ParentID
  ON
    [s].[ParentID] = SubmissionType_ParentID.[ID]
GO
GRANT SELECT ON [abstracts].[vwSubmissionTypes] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    



GRANT EXECUTE ON [abstracts].[spCreatePerson] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spCreateReview] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spCreateReviewerRole] TO [cdp_Integration], [cdp_Developer]





GRANT EXECUTE ON [abstracts].[spCreateSubmission] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spCreateSubmissionPerson] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spCreateSubmissionRole] TO [cdp_Integration], [cdp_Developer]





GRANT EXECUTE ON [abstracts].[spCreateSubmissionType] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spDeletePerson] TO [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spDeleteReview] TO [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spDeleteReviewerRole] TO [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spDeleteSubmission] TO [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spDeleteSubmissionPerson] TO [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spDeleteSubmissionRole] TO [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spDeleteSubmissionType] TO [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spUpdatePerson] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spUpdateReview] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spUpdateReviewerRole] TO [cdp_Integration], [cdp_Developer]





GRANT EXECUTE ON [abstracts].[spUpdateSubmission] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spUpdateSubmissionPerson] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [abstracts].[spUpdateSubmissionRole] TO [cdp_Integration], [cdp_Developer]





GRANT EXECUTE ON [abstracts].[spUpdateSubmissionType] TO [cdp_Developer], [cdp_Integration]




-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Persons
-- Item: Permissions for vwPersons
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [abstracts].[vwPersons] TO [cdp_Developer], [cdp_Integration], [cdp_UI]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviewer Roles
-- Item: Permissions for vwReviewerRoles
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [abstracts].[vwReviewerRoles] TO [cdp_Integration], [cdp_Developer], [cdp_UI]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reviews
-- Item: Permissions for vwReviews
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [abstracts].[vwReviews] TO [cdp_Developer], [cdp_UI], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Persons
-- Item: Permissions for vwSubmissionPersons
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [abstracts].[vwSubmissionPersons] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Roles
-- Item: Permissions for vwSubmissionRoles
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [abstracts].[vwSubmissionRoles] TO [cdp_UI], [cdp_Integration], [cdp_Developer]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submissions
-- Item: Permissions for vwSubmissions
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [abstracts].[vwSubmissions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Submission Types
-- Item: Permissions for vwSubmissionTypes
-- Generated: 11/19/2024, 3:57:04 PM
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [abstracts].[vwSubmissionTypes] TO [cdp_Developer], [cdp_UI], [cdp_Integration]


